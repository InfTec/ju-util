# JU default properties. See JuUtils.getJuPropertyChain for details.
####################################################################

# General settings

# Whether property interpolation is activated. If so, placeholders like
# ${propName} will be interpolated using the plexus-interpolator framework.
ju-util.propertyChain.interpolation=true

# Properties for testing
########################

# If true, we'll compare the exported file to the resource on the classpath rather than
# actually export the DataSet into a file.
ju-testing.export.compareToResource=true

# If true, the JU property chain will be cleared after each test run,
# allowing for property modifications while the container is running. This can be helpful while testing,
# but will be less performant that caching the properties.
# When changing from false to true, a restart is required.
ju-testing-ee.clearPropertyChainAfterEachTest=false

# If true, JCE unlimited Strength Jurisdiction Policy Files are installed and strong encryption tests
# can bre executed.
ju-testing.javaCryptographyExtension.isInstalled=false

# Properties for Security
###############################

# If true, strong encryption algorithms will be used. Note that this might require installing the JCE Unlimited Strength Jurisdiction files
ju-util.propertyChain.encryption.strong=false

# Password to use to decrypt encrypted values.
# Usually, we want to use the passwordFile property to avoid having the password in the
# source control, but we might also chose to use interpolation to
# get the password from the environmental variables, e.g. ${env.MY_PASSWORD}
# Takes precedence over ju-util.propertyChain.encryption.passwordFile
#ju-util.propertyChain.encryption.password=password

# Path to file that contains the password to decrypt encrypted property values.
# If empty, decryption will be disabled.
# Encoding of the file must be UTF-8 and the contents of the file will be trimmed to avoid problems with
# leading or trailing whitespace and new lines.
# Is only considered if ju-util.propertyChain.encryption.password is not set
#ju-util.propertyChain.encryption.passwordFile=encryption.key

# EE Properties
###############

# Default dynamic CDI tag used by DynamicCdiLoader if no matching implemenation can be found.
# Can be used to load simulator implementations by default, for instance.
ju.ee.cdi.defaultDynamicCdiTag=-

# Property that allows to define a different hornetq directory for JBoss.
# This is necessary if multiple JBoss instances are to be run on the same physical machine - otherwise, only one
# instance will be able to aquire a lock.
ju.ee.jboss.hornetqDirPrefix=data/messaging-${ju-util-ee.portOffset}-

# Property to specify that JuUrl class will replace the JBoss 'vfs' protocol that is used when doing resource
# lookup with the default 'jar:file' protocol.
# This allows for resource hot replacement which vrf doesn't allow. 
# See http://stackoverflow.com/questions/20100390/how-to-turn-off-or-disable-vfs-file-loading-in-jboss-as7 for details
# Note that this only applies to URLs looked up (directly or indirectly) with JuUrl class.
# If true, VFS resource lookups will be replaced by file:jar lookups.
ju.ee.url.disableVfsForResourceLookup=false

# If true, the disableVfsForResourceLookup flag is only evaluated once, i.e. Server has to be restarted in order
# for changes to take effect. This avoid excessive logging for each URL evaluation.
# Obviously, the flag itself will also be cached for the same reason.
ju.ee.url.cacheVfsFlag=true

# Properties for web tests
############################

# Host name for web tests
ju-testing-ee.web.host=localhost

# Port number for web tests
ju-testing-ee.web.port=8080

# Whether internet (direct, i.e. without proxy access) is available
ju-testing-ee.internet.isAvailable=false

# Specify a proxy server if we can only connect to the internet using a proxy server
# Format should be host:port, e.g. proxy:8080
ju-testing-ee.internet.proxy=

# Driver type to use for Web-Tests
#   - HtmlUnit: Default driver, no GUI
#   - Chrome: needs installed chrome and isAvailable property set to true
# Default is HtmlUnit
# We can specify multiple drivers in a comma separated list, e.g. HtmlUnit,Chrome. The tests will then
# run for each driver in the list.
ju-testing-ee.selenium.driver=HtmlUnit

# Whether JavaScript support should be enabled for HtmlUnit driver
ju-testing-ee.selenium.htmlUnit.enableJavascript=true

# Whether chrome is available
ju-testing-ee.selenium.chrome.isAvailable=false

# URL to the chromedriver.exe. If not specified, JU will use the exe bundled with the library.
# This option can be useful to use a later driver without having to update the library.
# Use a platform specific path that can be parsed by Paths, e.g. D:/temp/chromedriver.exe
ju-testing-ee.selenium.chrome.chromeDriverExe=

# Properties for networking (web and remoting)
###########################

# Port offset. Will be applied to web and remoting port
ju-util-ee.portOffset=0

# Properties for DB tests
#########################

# Note: To define an admin profile, we'll append 'Admin' to the profile name, e.g. ju-util-test.derbyAdmin.connectionUrl etc.
# If an admin profile is set, the test profile will be created automatically if it doesn't exist yet.

# Set profile to default profile.
ju-dbutil-test.profile=derby

# Use default context DB file.
ju-dbutil-test.jta.contextFile=JtaTest-context-db.xml

# Derby profile
ju-dbutil-test.derby.connectionUrl=jdbc:derby:memory:ju-testing_pu-test;create=true

# H2 profile
ju-dbutil-test.h2.connectionUrl=jdbc:h2:mem:ju-testing_pu-test;DB_CLOSE_DELAY=-1

# HSQL profile
ju-dbutil-test.hsql.connectionUrl=jdbc:hsqldb:mem:hsqldb

# MySQL profile
# Use locally installed MySQL
ju-dbutil-test.mysqlAdmin.connectionUrl=jdbc:mysql://localhost
ju-dbutil-test.mysqlAdmin.user=root
ju-dbutil-test.mysqlAdmin.password=secret
ju-dbutil-test.mysqlAdmin.dropExistingSchema=true
ju-dbutil-test.mysql.connectionUrl=jdbc:mysql://localhost/ju-test
ju-dbutil-test.mysql.user=ju
ju-dbutil-test.mysql.schema=ju-test
ju-dbutil-test.mysql.password=pwju

# Oracle profile
# Use locally installed Oracle XE
ju-dbutil-test.oracleAdmin.connectionUrl=jdbc:oracle:thin:@localhost:1521:xe
ju-dbutil-test.oracleAdmin.user=sys as sysdba
ju-dbutil-test.oracleAdmin.password=secret
ju-dbutil-test.oracleAdmin.dropExistingSchema=true
ju-dbutil-test.oracleAdmin.jtaRecoveryGrants=true
ju-dbutil-test.oracle.connectionUrl=jdbc:oracle:thin:@localhost:1521:xe
ju-dbutil-test.oracle.user=JU_TEST
ju-dbutil-test.oracle.password=pwju

# Properties for Remoting
#########################

# See ServiceLocatorBuilder.createRemoteByConfigurationFiles for details
ju-util-ee.remote.host=localhost
ju-util-ee.remote.port=8080
#ju-util-ee.remote.appName=ee-ear-ear
#ju-util-ee.remote.moduleName=ee-ear-ejb